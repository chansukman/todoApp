{"ast":null,"code":"var _jsxFileName = \"/Users/stephanie/Desktop/React/api/todoapp/src/todoListDisplay/todoListDisplay.js\",\n  _s = $RefreshSig$();\n// import './todoListDisplay.css';\n// import React, { useState } from 'react';\n\n// const TodoListDisplay = (props) => {\n//   const [editedText, setEditedText] = useState('');\n//   const [editingNoteId, setEditingNoteId] = useState(null);\n\n//   const startEditing = (id) => {\n//     setEditingNoteId(id);\n//     setEditedText(props.notes.find(note => note.id === id)?.description || '');\n//   };\n\n//   const updateClick = async (id) => {\n//     try {\n//       // Call the appropriate API or function to update the note with the new text\n//       console.log(`Updated text for note with id ${id}: ${editedText}`);\n//       const response = await fetch(props.API_URL + \"api/todoapp/UpdateNotes\", {\n//         method: \"PUT\",\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           id: id,\n//           editedText: editedText,\n//         }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Error updating note: ${response.status}`);\n//       }\n\n//       const result = await response.json();\n//       alert(result);\n//       setEditingNoteId(null); // Reset editing after updating\n//       props.refreshNotes();\n//     } catch (error) {\n//       console.error('Error updating note:', error);\n//       // Handle errors as needed\n//     }\n//   };\n\n//   const deleteClick = (id) => {\n//     fetch(props.API_URL + \"api/todoapp/DeleteNotes?id=\" + id, {\n//       method: \"DELETE\",\n//     })\n//       .then(res => res.json())\n//       .then(result => {\n//         alert(result);\n//         props.refreshNotes();\n//       });\n//   };\n\n//   return (\n//     <div>\n//       {props.notes.map(note =>\n//         <div key={note.id} className=\"topicTitle\">\n//           <input\n//             type=\"text\"\n//             value={editingNoteId === note.id ? editedText : note.description}\n//             onFocus={() => startEditing(note.id)}\n//             onChange={(e) => setEditedText(e.target.value)}\n//           />\n//           <div className=\"topicAction\">\n//             <button className='updateBtn' onClick={() => updateClick(note.id)}>Update Notes</button>\n//             <button className='deleteBtn' onClick={() => deleteClick(note.id)}>Delete Notes</button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default TodoListDisplay;\n\nimport './todoListDisplay.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoListDisplay = props => {\n  _s();\n  const [editedText, setEditedText] = useState('');\n  const [editingNoteId, setEditingNoteId] = useState(null);\n  const startEditing = id => {\n    var _props$notes$find;\n    setEditingNoteId(id);\n    setEditedText(((_props$notes$find = props.notes.find(note => note.id === id)) === null || _props$notes$find === void 0 ? void 0 : _props$notes$find.description) || '');\n  };\n  const updateClick = async (id, editedText) => {\n    try {\n      // Call the appropriate API or function to update the note with the new text\n      console.log(`Updated text for note with id ${id}: ${editedText}`);\n      // const data = new FormData();\n      data.append(\"editedText\", editedText);\n      const response = await fetch(props.API_URL + `api/todoapp/UpdateNotes?id=${id}`, {\n        method: \"PUT\",\n        body: data\n        // headers: {\n        //   'Content-Type': 'application/json',\n        // },\n        // body: JSON.stringify({\n        //   editedText: editedText,\n        // }),\n      });\n      if (!response.ok) {\n        throw new Error(`Error updating note: ${response.status}`);\n      }\n      const result = await response.json();\n      alert(result);\n      setEditingNoteId(null); // Reset editing after updating\n      props.refreshNotes();\n    } catch (error) {\n      console.error('Error updating note:', error);\n      // Handle errors as needed\n    }\n  };\n  const deleteClick = async id => {\n    try {\n      const response = await fetch(props.API_URL + `api/todoapp/DeleteNotes?id=${id}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) {\n        throw new Error(`Error deleting note: ${response.status}`);\n      }\n      const result = await response.json();\n      alert(result);\n      props.refreshNotes();\n    } catch (error) {\n      console.error('Error deleting note:', error);\n      // Handle errors as needed\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: props.notes.map(note => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"topicTitle\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: editingNoteId === note.id ? editedText : note.description,\n        onFocus: () => startEditing(note.id),\n        onChange: e => setEditedText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topicAction\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"updateBtn\",\n          onClick: () => updateClick(note.id, editedText),\n          children: \"Update Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deleteBtn\",\n          onClick: () => deleteClick(note.id),\n          children: \"Delete Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, note.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoListDisplay, \"UYcck2uivqdAs+mWKDml0L0Xj7o=\");\n_c = TodoListDisplay;\nexport default TodoListDisplay;\nvar _c;\n$RefreshReg$(_c, \"TodoListDisplay\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TodoListDisplay","props","_s","editedText","setEditedText","editingNoteId","setEditingNoteId","startEditing","id","_props$notes$find","notes","find","note","description","updateClick","console","log","data","append","response","fetch","API_URL","method","body","ok","Error","status","result","json","alert","refreshNotes","error","deleteClick","children","map","className","type","value","onFocus","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/stephanie/Desktop/React/api/todoapp/src/todoListDisplay/todoListDisplay.js"],"sourcesContent":["// import './todoListDisplay.css';\n// import React, { useState } from 'react';\n\n// const TodoListDisplay = (props) => {\n//   const [editedText, setEditedText] = useState('');\n//   const [editingNoteId, setEditingNoteId] = useState(null);\n\n//   const startEditing = (id) => {\n//     setEditingNoteId(id);\n//     setEditedText(props.notes.find(note => note.id === id)?.description || '');\n//   };\n\n//   const updateClick = async (id) => {\n//     try {\n//       // Call the appropriate API or function to update the note with the new text\n//       console.log(`Updated text for note with id ${id}: ${editedText}`);\n//       const response = await fetch(props.API_URL + \"api/todoapp/UpdateNotes\", {\n//         method: \"PUT\",\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           id: id,\n//           editedText: editedText,\n//         }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Error updating note: ${response.status}`);\n//       }\n\n//       const result = await response.json();\n//       alert(result);\n//       setEditingNoteId(null); // Reset editing after updating\n//       props.refreshNotes();\n//     } catch (error) {\n//       console.error('Error updating note:', error);\n//       // Handle errors as needed\n//     }\n//   };\n\n\n//   const deleteClick = (id) => {\n//     fetch(props.API_URL + \"api/todoapp/DeleteNotes?id=\" + id, {\n//       method: \"DELETE\",\n//     })\n//       .then(res => res.json())\n//       .then(result => {\n//         alert(result);\n//         props.refreshNotes();\n//       });\n//   };\n\n//   return (\n//     <div>\n//       {props.notes.map(note =>\n//         <div key={note.id} className=\"topicTitle\">\n//           <input\n//             type=\"text\"\n//             value={editingNoteId === note.id ? editedText : note.description}\n//             onFocus={() => startEditing(note.id)}\n//             onChange={(e) => setEditedText(e.target.value)}\n//           />\n//           <div className=\"topicAction\">\n//             <button className='updateBtn' onClick={() => updateClick(note.id)}>Update Notes</button>\n//             <button className='deleteBtn' onClick={() => deleteClick(note.id)}>Delete Notes</button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default TodoListDisplay;\n\n\nimport './todoListDisplay.css';\nimport React, { useState } from 'react';\n\nconst TodoListDisplay = (props) => {\n  const [editedText, setEditedText] = useState('');\n  const [editingNoteId, setEditingNoteId] = useState(null);\n\n  const startEditing = (id) => {\n    setEditingNoteId(id);\n    setEditedText(props.notes.find(note => note.id === id)?.description || '');\n  };\n\n  const updateClick = async (id,editedText) => {\n    try {\n      // Call the appropriate API or function to update the note with the new text\n      console.log(`Updated text for note with id ${id}: ${editedText}`);\n      // const data = new FormData();\n      data.append(\"editedText\", editedText);\n\n      const response = await fetch(props.API_URL + `api/todoapp/UpdateNotes?id=${id}`, {\n        method: \"PUT\",\n        body: data,\n        // headers: {\n        //   'Content-Type': 'application/json',\n        // },\n        // body: JSON.stringify({\n        //   editedText: editedText,\n        // }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error updating note: ${response.status}`);\n      }\n\n      const result = await response.json();\n      alert(result);\n      setEditingNoteId(null); // Reset editing after updating\n      props.refreshNotes();\n    } catch (error) {\n      console.error('Error updating note:', error);\n      // Handle errors as needed\n    }\n  };\n\n  const deleteClick = async (id) => {\n    try {\n      const response = await fetch(props.API_URL + `api/todoapp/DeleteNotes?id=${id}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error deleting note: ${response.status}`);\n      }\n\n      const result = await response.json();\n      alert(result);\n      props.refreshNotes();\n    } catch (error) {\n      console.error('Error deleting note:', error);\n      // Handle errors as needed\n    }\n  };\n\n  return (\n    <div>\n      {props.notes.map(note =>\n        <div key={note.id} className=\"topicTitle\">\n          <input\n            type=\"text\"\n            value={editingNoteId === note.id ? editedText : note.description}\n            onFocus={() => startEditing(note.id)}\n            onChange={(e) => setEditedText(e.target.value)}\n          />\n          <div className=\"topicAction\">\n            <button className='updateBtn' onClick={() => updateClick(note.id, editedText)}>Update Notes</button>\n            <button className='deleteBtn' onClick={() => deleteClick(note.id)}>Delete Notes</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default TodoListDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}