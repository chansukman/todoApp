{"ast":null,"code":"var _jsxFileName = \"/Users/stephanie/Desktop/React/api/todoapp/src/todoListDisplay/todoListDisplay.js\",\n  _s = $RefreshSig$();\n// import './todoListDisplay.css';\n// import React, { useState, useRef, useEffect } from 'react';\n\n// const TodoListDisplay = (props) => {\n//   const [editedText, setEditedText] = useState('');\n//   const [editingNoteId, setEditingNoteId] = useState(null);\n\n//   const updateClick = (id) => {\n//     // Call the appropriate API or function to update the note with the new text\n//     // You might want to use the 'editedText' state to get the updated text\n//     // For simplicity, I'm just logging the updated text to the console here\n//     console.log(`Updated text for note with id ${id}: ${editedText}`);\n\n//   };\n\n//   const deleteClick = (id) => {\n//     // The delete logic remains the same\n//     fetch(props.API_URL + \"api/todoapp/DeleteNotes?id=\" + id, {\n//       method: \"DELETE\",\n//     })\n//       .then(res => res.json())\n//       .then(result => {\n//         alert(result);\n//         props.refreshNotes();\n//       });\n//   };\n\n//   return (\n//     <div>\n//       {props.notes.map(note =>\n//         <div key={note.id} className=\"topicTitle\">\n//           <input\n//             type=\"text\"\n//             value={editedText === '' ? note.description: editedText}\n//             onChange={(e) => setEditedText(e.target.value)}\n//             onFocus={() => setEditingNoteId(note.id)}\n//           />\n//           <div className=\"topicAction\">\n//             <button className='updateBtn' onClick={() => updateClick(note.id)}>Update Notes</button>\n//             <button className='deleteBtn' onClick={() => deleteClick(note.id)}>Delete Notes</button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default TodoListDisplay;\n\nimport './todoListDisplay.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoListDisplay = props => {\n  _s();\n  const [editedText, setEditedText] = useState('');\n  const [editingNoteId, setEditingNoteId] = useState(null);\n  const startEditing = id => {\n    var _props$notes$find;\n    setEditingNoteId(id);\n    setEditedText(((_props$notes$find = props.notes.find(note => note.id === id)) === null || _props$notes$find === void 0 ? void 0 : _props$notes$find.description) || '');\n  };\n  const updateClick = id => {\n    // Call the appropriate API or function to update the note with the new text\n    console.log(`Updated text for note with id ${id}: ${editedText}`);\n    setEditingNoteId(null); // Reset editing after updating\n  };\n  const deleteClick = id => {\n    // The delete logic remains the same\n    // ...\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: props.notes.map(note => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"topicTitle\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: editingNoteId === note.id ? editedText : note.description,\n        onFocus: () => startEditing(note.id),\n        onChange: e => setEditedText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topicAction\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"updateBtn\",\n          onClick: () => updateClick(note.id),\n          children: \"Update Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deleteBtn\",\n          onClick: () => deleteClick(note.id),\n          children: \"Delete Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, note.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoListDisplay, \"UYcck2uivqdAs+mWKDml0L0Xj7o=\");\n_c = TodoListDisplay;\nexport default TodoListDisplay;\nvar _c;\n$RefreshReg$(_c, \"TodoListDisplay\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TodoListDisplay","props","_s","editedText","setEditedText","editingNoteId","setEditingNoteId","startEditing","id","_props$notes$find","notes","find","note","description","updateClick","console","log","deleteClick","children","map","className","type","value","onFocus","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/stephanie/Desktop/React/api/todoapp/src/todoListDisplay/todoListDisplay.js"],"sourcesContent":["// import './todoListDisplay.css';\n// import React, { useState, useRef, useEffect } from 'react';\n\n// const TodoListDisplay = (props) => {\n//   const [editedText, setEditedText] = useState('');\n//   const [editingNoteId, setEditingNoteId] = useState(null);\n\n//   const updateClick = (id) => {\n//     // Call the appropriate API or function to update the note with the new text\n//     // You might want to use the 'editedText' state to get the updated text\n//     // For simplicity, I'm just logging the updated text to the console here\n//     console.log(`Updated text for note with id ${id}: ${editedText}`);\n\n//   };\n\n//   const deleteClick = (id) => {\n//     // The delete logic remains the same\n//     fetch(props.API_URL + \"api/todoapp/DeleteNotes?id=\" + id, {\n//       method: \"DELETE\",\n//     })\n//       .then(res => res.json())\n//       .then(result => {\n//         alert(result);\n//         props.refreshNotes();\n//       });\n//   };\n\n//   return (\n//     <div>\n//       {props.notes.map(note =>\n//         <div key={note.id} className=\"topicTitle\">\n//           <input\n//             type=\"text\"\n//             value={editedText === '' ? note.description: editedText}\n//             onChange={(e) => setEditedText(e.target.value)}\n//             onFocus={() => setEditingNoteId(note.id)}\n//           />\n//           <div className=\"topicAction\">\n//             <button className='updateBtn' onClick={() => updateClick(note.id)}>Update Notes</button>\n//             <button className='deleteBtn' onClick={() => deleteClick(note.id)}>Delete Notes</button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default TodoListDisplay;\n\n\nimport './todoListDisplay.css';\nimport React, { useState } from 'react';\n\nconst TodoListDisplay = (props) => {\n  const [editedText, setEditedText] = useState('');\n  const [editingNoteId, setEditingNoteId] = useState(null);\n\n  const startEditing = (id) => {\n    setEditingNoteId(id);\n    setEditedText(props.notes.find(note => note.id === id)?.description || '');\n  };\n\n  const updateClick = (id) => {\n    // Call the appropriate API or function to update the note with the new text\n    console.log(`Updated text for note with id ${id}: ${editedText}`);\n    setEditingNoteId(null); // Reset editing after updating\n  };\n\n  const deleteClick = (id) => {\n    // The delete logic remains the same\n    // ...\n  };\n\n  return (\n    <div>\n      {props.notes.map(note =>\n        <div key={note.id} className=\"topicTitle\">\n          <input\n            type=\"text\"\n            value={editingNoteId === note.id ? editedText : note.description}\n            onFocus={() => startEditing(note.id)}\n            onChange={(e) => setEditedText(e.target.value)}\n          />\n          <div className=\"topicAction\">\n            <button className='updateBtn' onClick={() => updateClick(note.id)}>Update Notes</button>\n            <button className='deleteBtn' onClick={() => deleteClick(note.id)}>Delete Notes</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default TodoListDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}